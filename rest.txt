Rest - Representational State Transfer 
대표 상태 전송 - 로이 필딩 2000년도에 발표한 박사학위 논문에서 소개

규칙이 있는데 그 규칙을 다 따르면 Restful 하다고 함

1. Uniform interface
- 인터페이스는 일관성이 있어야 한다.
- 하나의 URL로는 하나의 데이터만 가져와야 한다.
(하나를 가져오기 위한 두개의 URL을 만들어서는 안된다.)
- 간결하고 예측가능하게 설정

2. Client - Server 역할 구분하기
- 사용자가 url 하나로 서버에 있는 자료를 사용
ex) 사용자에게 서버 역할을 맡기거나 / 사용자에게 DB에 있는 자료를 직접 꺼내오라는 식의 코드를 작성해서는 안된다.

3. Stateless 
- 요청들은 각각 독립적으로 처리 되어야 한다.
- 요청1이 성공해야 요청2를 보내주고 그런식으로 요청간의 의존성이 존재하는 코드를 작성해서는 안된다.

4. Cacheable
- 요청을 통해 보내는 자료는 캐싱이 가능해야 한다.
- 아울러 캐싱이 가능하다고 표시하거나 / 캐싱 기간을 별도로 설정해주어야 한다.

* 캐싱이란?
예를 들어 네이버를 방문하면 브라우저에서 사용되는 css / images / js 를 하드 디스크에서 저장해두어 다시 방문해졌을 때 해당 리소스를 사용해 조금 더 빠르게 로딩 

5. Layered System 
- 요청을 처리하는 곳, DB에 저장하는 곳 등 여러가지 단계를 거쳐서 요청을 처리 가능
여러개의 레이어를 거쳐서 요청을 처리하게 만들어도 된다.

6. Code on Demand
- 서버는 레이어를 거쳐서 요청을 처리하게 만들어도 된다.






url 이름짓기 관습
instagram.com/explore/tags/food
instagram.com/explore/tags/kpop

단어들을 동사보다 명사 위주로 구성
응용해서 다른 정보들을 쉽게 가져올 수 있도록 일관성
누가봐도 URL 만으로 어떤 정보가 들어올지 예측 가능

이름을 잘 짓는 방법론
띄어쓰기는 언더바(_) 대신 대시(-) 사용
파일 확장자 쓰지 말기
하위 문서들을 뜻할 땐 슬래쉬(/) 를 사용






